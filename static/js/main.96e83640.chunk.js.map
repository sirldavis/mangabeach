{"version":3,"sources":["CalDateRangePicker.js","App.js","serviceWorker.js","index.js"],"names":["CalDateRangePicker","bookedDays","prices","defaultPrice","useState","moment","Date","date1","setDate1","add","date2","setDate2","focusedInput","setFocusedInput","hideKeyboardShortcutsPanel","numberOfMonths","window","innerWidth","renderDayContents","text","date","mon","month","a","dayView","has","get","includes","dayPrice","getPrice","className","startDate","endDate","onDatesChange","clearCalendar","b","setDate3","OnDatesChange","onFocusChange","type","value","onClick","costmsg","diff","checkDate","total","isBefore","computePrice","checkinmsg","format","checkoutmsg","bookingMsg","App","Map","set","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.96e83640.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { DayPickerRangeController } from \"react-dates\";\r\nimport \"react-dates/initialize\";\r\nimport \"react-dates/lib/css/_datepicker.css\";\r\nimport moment from \"moment\";\r\nimport \"./CalDateRangePicker.css\";\r\n\r\nexport default function CalDateRangePicker({  bookedDays, prices, defaultPrice }) {\r\n  const [date1, setDate1] = useState(moment(new Date()));\r\n  const [date2, setDate2] = useState(moment(new Date()).add(2, 'd'));\r\n  const [focusedInput, setFocusedInput] = useState(\"startDate\");\r\n\r\n  const numberOfNights = (a, b) => {\r\n    if (a == null || b == null)\r\n      return 0;\r\n    return date2.diff(date1, 'days');\r\n  }\r\n  const computePrice = (a, b) => {\r\n    if (a == null || b == null)\r\n    return 0;\r\n\r\n    //need to iterate from a to before b and add prices:\r\n    var checkDate=moment(a);\r\n    var total=0;\r\n    while (checkDate.isBefore(b)) {\r\n      const aprice = getPrice(checkDate.month(), checkDate.date()-1);\r\n      total+=aprice;\r\n      checkDate.add(1,'days');\r\n    }\r\n    return total;\r\n  }\r\n  const setDate3 = (a, b) => {\r\n    setDate1(a.startDate); \r\n    setDate2(a.endDate);\r\n  };\r\n\r\n  const renderDayContents = (text, date) => {\r\n    const mon = text.month();\r\n    const a = text.date();\r\n    // console.log(mon);\r\n    // console.log( \"date: \"+bookedDays.get(mon));  \r\n    const dayView = (bookedDays.has(mon) ? bookedDays.get(mon) : []).includes(a)\r\n      ? \"X\"\r\n      : a;\r\n    var dayPrice = getPrice(mon, a-1);\r\n    return <div >\r\n      <div>{dayView}</div>\r\n      <div className=\"price\" >${dayPrice}</div>\r\n    </div>\r\n  }\r\n  const onFocusChange = (focusedInput) => {\r\n    //console.log(\"focusedInput: \"+focusedInput);\r\n    setFocusedInput(\r\n      // Force the focusedInput to always be truthy so that dates are always selectable\r\n      focusedInput === \"startDate\" ? \"endDate\" : focusedInput\r\n    );\r\n  }\r\n\r\n  return (\r\n /*\r\n The DayPickerRangeController component is a fully controlled version of the DayPicker that has built-in rules for selecting a date range. Unlike the DayPicker, which requires the consumer to explicitly define onDayMouseEnter, onDayMouseLeave, and onDayClick handlers, the consumer needs simply to maintain the focusedInput, startDate, and endDate values in state and then pass these down as props along with onFocusChange and onDatesChange callbacks that update them appropriately. You can see an example of this implementation here.\r\n Note that the focusedInput prop may be null, but if this is the case, dates are not selectable. As a result, in the example wrapper, we always force focusedInput to be truthy in the onFocusChange method.\r\n The DayPickerRangeController is particularly useful if you are interested in the DateRangePicker functionality and calendar presentation, but would like to implement your own inputs. \r\n https://github.com/airbnb/react-dates/blob/master/examples/DayPickerRangeControllerWrapper.jsx\r\n */\r\n    <div>\r\n      <DayPickerRangeController\r\n        hideKeyboardShortcutsPanel\r\n        numberOfMonths={window.innerWidth < 600 ? 1 : 3}\r\n        renderDayContents={renderDayContents}\r\n        startDate={date1} // momentPropTypes.momentObj or null,\r\n\r\n        endDate={date2} // momentPropTypes.momentObj or null,\r\n        onDatesChange={OnDatesChange()} // PropTypes.func.isRequired,\r\n        focusedInput={focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\r\n        onFocusChange={focusedInput => onFocusChange(focusedInput)} // PropTypes.func.isRequired,\r\n        //initialVisibleMonth={() => moment().add(3, \"M\")} causes bug! PropTypes.func or null,\r\n      />\r\n      <input type=\"button\" value=\"Clear\" onClick={() => { clearCalendar(); }}></input>\r\n        {bookingMsg()}\r\n    </div>\r\n  );\r\n  function bookingMsg() {\r\n    if (date1!=null && date2!=null) {\r\n    const costmsg =  numberOfNights(date1, date2)\r\n      + \" nights = $\" +\r\n      computePrice(date1, date2);\r\n     \r\n    const checkinmsg =\"16:00 \"+date1.format(\"MMM Do dddd\")\r\n    const checkoutmsg =\" 11:00 \"+ date2.format(\"MMM Do dddd\");\r\n    return <ul className=\"liststyle\">\r\n      <li>{costmsg}</li>\r\n      <li>{checkinmsg}</li>\r\n      <li>{checkoutmsg}</li>\r\n      </ul>\r\n      }\r\n  }\r\n  function OnDatesChange() {\r\n    if (date1 != null) {\r\n      const mon = date1.month();\r\n      const a = date1.date();\r\n      const dayView = (bookedDays.has(mon) ? bookedDays.get(mon) : []).includes(a);\r\n      if (dayView) {\r\n        clearCalendar();   \r\n        return;\r\n      }\r\n    }\r\n    return ({ startDate, endDate }) => setDate3({ startDate, endDate });\r\n  }\r\n\r\n  function clearCalendar() {\r\n    setDate1(null);\r\n    setDate2(null);\r\n    setFocusedInput(\"startDate\");\r\n  }\r\n\r\n  function getPrice(mon, a) {\r\n    var dayPrice = (prices.has(mon) ? prices.get(mon)[a] : defaultPrice);\r\n    if (dayPrice == null)\r\n      dayPrice = defaultPrice;\r\n    return dayPrice;\r\n  }\r\n}\r\n\r\n/*\r\nhttps://github.com/airbnb/react-dates/blob/master/examples/DayPickerRangeControllerWrapper.jsx\r\n\r\n\r\n\r\n <SingleDatePicker\r\n    numberOfMonths={window.innerWidth < 600 ? 1 : 2}\r\n    onDateChange={date => onChange({ target: { value: date } })}\r\n    onFocusChange={({ focused }) => setFocused(focused)}\r\n    focused={focused}\r\n    date={date}\r\n    displayFormat=\"YYYY-MM-DD\"\r\n    isDayBlocked={m => m.day() === 6 || m.day() === 0}\r\n    hideKeyboardShortcutsPanel\r\n    // withPortalenPortal={window.innerWidth < 400}\r\n*/\r\n","import React from \"react\";\nimport CalDateRangePicker from \"./CalDateRangePicker\";\n\n//import { render } from \"react-dom\";\n// import moment from \"moment\";\n// import DatePicker2 from \"./DatePicker2\";\n// import DateRangePicker from \"react-dates\";\n\nconst App = ()=> {\n   \n \n   \n  const defaultPrice =90;\n  const prices = new Map();\n  prices.set(3,[50,45,30,20,30,40,50]);\n  prices.set(8,[50,45,30,20,30,40,50]);\n  const bookedDays = new Map();\n  bookedDays.set(3, [1,2,3]);\n  bookedDays.set(5, [1,2,3]);\n  bookedDays.set(6, [1,2,3]);\n  bookedDays.set(7, [1,2,3]);\n  bookedDays.set(8, [1,2,3]);\n  bookedDays.set(9, [1,2,3]);\n  bookedDays.set(10, [1,2,3]);\n\n  return (\n      <div>\n    <hr />\n      <CalDateRangePicker bookedDays={bookedDays}\n      prices={prices} defaultPrice={defaultPrice} />\n\n      <hr />\n\n    </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}